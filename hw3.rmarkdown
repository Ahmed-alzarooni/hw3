---
title: "Homework 3"
author: "[Ahmed Alzarooni]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
format: html
# format: pdf
---


---

::: {.callout-important style="font-size: 0.8em;"}

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset from the UCI Machine Learning Repository. The dataset consists of red and white _vinho verde_ wine samples, from the north of Portugal. The goal is to model wine quality based on physicochemical tests

We will be using the following libraries:


```{R}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(broom)
library(corrplot)
library(car)
library(stats)
library(glmnet)
```


<br><br><br><br>

---

## Question 1
::: {.callout-tip}
## 50 points
Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in data frames `df1` and `df2`.

```{R}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read.csv(url1, sep = ";")
df2 <- read.csv(url2, sep = ";")
```

---


###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine. 
1. Rename the columns of `df` to replace spaces with underscores
1. Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
1. Convert the `type` column to a factor
1. Remove rows (if any) with missing values.



```{R}
df <- bind_rows(
  mutate(df1, type = "white"),  # Add 'type' column to df1
  mutate(df2, type = "red")     # Add 'type' column to df2
) 
df <- df %>%
  rename_with(~ gsub("\\.", "_", .x)) %>%  # Correctly rename columns to replace periods with underscores
  select(-fixed_acidity, -free_sulfur_dioxide) %>%  # Now correctly reference updated column names
  mutate(type = as.factor(type)) %>%
  drop_na()
```



Your output to `R dim(df)` should be
```
[1] 6497   11
```



---

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the the difference in means (with the equal variance assumption)

1. Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`. 

2. Compute the pooled sample variance and store the value as a variable called `sp_squared`. 

3. Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.



```{R}

mean_white = mean(df$quality[df$type == 'white'])
mean_red = mean(df$quality[df$type == 'red'])

diff_mean <- mean_white - mean_red

n_white = sum(df$type == 'white')  # Sample size for white wine
n_red = sum(df$type == 'red')  # Sample size for red wine
var_white = var(df$quality[df$type == 'white'])  # Variance for white wine
var_red = var(df$quality[df$type == 'red'])  # Variance for red wine
sp <- ((n_white - 1) * var_white + (n_red - 1) * var_red) / (n_white + n_red - 2)

t1 <- diff_mean / sqrt(sp * (1/n_white + 1/n_red))
```



---

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to perform a two-sample $t$-Test without having to compute the pooled variance and difference in means. 

Perform a two-sample t-test to compare the quality of white and red wines using the `t.test()` function with the setting `var.equal=TRUE`. Store the t-statistic in `t2`.


```{R}
t_test <- t.test(quality ~ type, data=df, var.equal=TRUE) 
t2 <- t_test$statistic
```


---

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the `lm()` function, and extract the $t$-statistic for the `type` coefficient from the model summary. Store this $t$-statistic in `t3`.


```{R}
fit <- lm(quality ~ type, data=df) 
summary_fit <- summary(fit)
t3 <- summary_fit$coefficients["typewhite", "t value"]
```



---

###### 1.6  (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can you conclude from this? Why?


```{R}
c(t1=t1, t2=t2, t3=t3)
```





<br><br><br><br>
<br><br><br><br>

---

## Question 2
::: {.callout-tip}
## 25 points
Collinearity
:::


---


###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response variable `quality`. Use the `broom::tidy()` function to print a summary of the fitted model. What can we conclude from the model summary?

The model reveals several predictors with statistically significant effects on wine quality, including volatile acidity, residual sugar, chlorides, density, pH, sulphates, alcohol, and the type of wine. These findings can inform winemakers and marketers about the physicochemical properties that most significantly impact wine quality from a statistical standpoint.



```{R}
model <- lm(quality ~ ., data = df)
model_summary <- tidy(model)
print(model_summary)
```



---

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only `citric_acid` as the predictor, and another with only `total_sulfur_dioxide` as the predictor. In both models, use `quality` as the response variable. How does your model summary compare to the summary from the previous question?

-Citric_acid became significant only in the simple model, whereas total_sulfur_dioxide showed a small but significant effect in both contexts.

-Predictors that seem insignificant in a complex model may reveal significant effects when isolated, possibly due to interactions with or adjustments for other variables in the model.

 -Predictive Power: Both simple models have very low $R^2$ values, indicating that neither citric_acid nor total_sulfur_dioxide are strong predictors of quality by themselves.



```{R}
model_citric <-lm(quality ~ citric_acid, data = df)
summary(model_citric)
```

```{R}
model_sulfur <- lm(quality ~ total_sulfur_dioxide, data = df)
summary(model_sulfur)
```



---

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`


```{R}
df %>% select(where(is.numeric)) %>% 
  cor() %>% 
  corrplot(method = "circle")
```




---

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the full model using `vif()` function. What can we conclude from this?

The model indicates potential multicollinearity issues, particularly with Density and Type


```{R}
full_model <- lm(quality ~ ., data = df)
vif_values <- vif(full_model)
print(vif_values)

```




<br><br><br><br>
<br><br><br><br>

---

## Question 3
::: {.callout-tip}
## 40 points

Variable selection
:::


---


###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the starting model. Store the final formula in an object called `backward_formula` using the built-in `formula()` function in R


```{R}
final_model <- step(full_model, direction = "backward")
backward_formula <- formula(final_model)
print(backward_formula)


```


---

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the starting model. Store the final formula in an object called `forward_formula` using the built-in `formula()` function in R


```{R}
null_model <- lm(quality ~ 1, data = df)
final_model <- step(null_model, direction = "forward", scope = list(lower = null_model, upper = lm(quality ~ ., data = df)))
forward_formula <- formula(final_model)
print(forward_formula)


```




---

###### 3.3  (10 points)

1. Create a `y` vector that contains the response variable (`quality`) from the `df` dataframe. 

2. Create a design matrix `X` for the `full_model` object using the `make_model_matrix()` function provided in the Appendix. 

3. Then, use the `cv.glmnet()` function to perform LASSO and Ridge regression with `X` and `y`.


```{R}
y <- df$quality
X <- model.matrix(~ . - quality, data = df)

lasso_model <- cv.glmnet(X, y, alpha = 1)
ridge_model <- cv.glmnet(X, y, alpha = 0)

```


Create side-by-side plots of the ridge and LASSO regression results. Interpret your main findings. 


```{R}
par(mfrow=c(1, 2))
plot(ridge_model, xvar = "lambda", label = TRUE)
title("Ridge Regression")

plot(lasso_model, xvar = "lambda", label = TRUE)
title("LASSO Regression")
```


---

###### 3.4  (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se` value? What are the variables selected by LASSO? 

```{R}
coef_lasso_1se <- coef(lasso_model, s = "lambda.1se")
print(coef_lasso_1se)
```


Store the variable names with non-zero coefficients in `lasso_vars`, and create a formula object called `lasso_formula` using the `make_formula()` function provided in the Appendix. 

```{r}
non_zero_coef <- coef_lasso_1se[coef_lasso_1se[, 1] != 0, , drop = FALSE]
lasso_vars <- rownames(non_zero_coef)[-1] 
predictor_str <- paste(lasso_vars, collapse = " + ")
lasso_formula_str <- paste("quality ~", predictor_str)
lasso_formula <- as.formula(lasso_formula_str)
print(lasso_formula)

```


---

###### 3.5  (5 points)

Print the coefficient values for ridge regression at the `lambda.1se` value? What are the variables selected here? 

```{r}
coef_ridge_1se <- coef(ridge_model, s = "lambda.1se")
print(coef_ridge_1se)

```

Store the variable names with non-zero coefficients in `ridge_vars`, and create a formula object called `ridge_formula` using the `make_formula()` function provided in the Appendix. 

```{r}
ridge_vars <- rownames(coef_ridge_1se)[-1]
predictor_str <- paste(ridge_vars, collapse = " + ")
ridge_formula_str <- paste("quality ~", predictor_str)
ridge_formula <- as.formula(ridge_formula_str)
print(ridge_formula)

```



---

###### 3.6  (10 points)

What is the difference between stepwise selection, LASSO and ridge based on you analyses above?

Ridge does not perform variable selection by zeroing out coefficients as LASSO does





<br><br><br><br>
<br><br><br><br>

---

## Question 4
::: {.callout-tip}
## 70 points

Variable selection
:::

---


###### 4.1  (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the covariates. How many different models can we create using any subset of these $10$ coavriates as possible predictors? Justify your answer. 


2^10=1024
Since each predictor can either be included or excluded independently of the others, we have two choices (include or exclude) for each of the 10 predictors, leading to 2^10 total combinations.

---


###### 4.2  (20 points)

Store the names of the predictor variables (all columns except `quality`) in an object called `x_vars`.

```{R}
x_vars <- colnames(df %>% select(-quality))
```

Use: 

* the `combn()` function (built-in R function) and 
* the `make_formula()` (provided in the Appendix) 

to **generate all possible linear regression formulas** using the variables in `x_vars`. This is most optimally achieved using the `map()` function from the `purrr` package.

```{R}
formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(x_vars, x, simplify = FALSE)
    map(vars, \(v) paste("quality ~", paste(v, collapse = " + ")))
  }
) %>% unlist()
```

If your code is right the following command should return something along the lines of:

```{R}
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

---


###### 4.3  (10 points)
Use `map()` and `lm()` to fit a linear regression model to each formula in `formulas`, using `df` as the data source. Use `broom::glance()` to extract the model summary statistics, and bind them together into a single tibble of summaries using the `bind_rows()` function from `dplyr`.


```{R}
models <- map(formulas, ~lm(.x, data = df)) 
summaries <- map(models, glance)
```




---


###### 4.4  (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to identify the formula with the _**highest**_ adjusted R-squared value.


```{R}
summaries_combined <- bind_rows(summaries)

summaries_combined$formula <- formulas

best_model <- summaries_combined %>%
  arrange(desc(adj.r.squared)) %>%
  slice(1)


```


Store resulting formula as a variable called `rsq_formula`.


```{R}
rsq_formula <- best_model$formula
print(rsq_formula)

```


---

###### 4.5  (5 points)

Extract the `AIC` values from `summaries` and use them to identify the formula with the **_lowest_** AIC value.



```{R}
best_aic_model <- summaries_combined %>%
  filter(AIC == min(AIC)) %>%
  slice(1)
```


Store resulting formula as a variable called `aic_formula`.



```{R}
aic_formula <- best_aic_model$formula
aic_formula
```


---

###### 4.6  (15 points)

Combine all formulas shortlisted into a single vector called `final_formulas`.


```{R}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
```


* Are `aic_formula` and `rsq_formula` the same? How do they differ from the formulas shortlisted in question 3?
 aic_formula includes total_sulfur_dioxide as a predictor, but rsq_formula does not. This difference shows how different selection criteria can lead to variations in model selection, Compared to the formulas shortlisted in question 3 aic_formula and rsq_formula represent specific selections based on statistical criteria rather than procedural selection methods 
 
* Which of these is more reliable? Why? 
reliability of aic_formula vs. rsq_formula depends on the analysis goals. For predictive modeling, aic_formula is often more reliable  but adjusted R-squared is more focused on the proportion of variance explained by the model

* If we had a dataset with $10,000$ columns, which of these methods would you consider for your analyses? Why?
LASSO can handle high-dimensional data by performing variable selection and regularization simultaneously, reducing the risk of overfitting by penalizing the absolute size of the coefficients and effectively removing less important variables from the model.

---

###### 4.7  (10 points)


Use `map()` and `glance()` to extract the `sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model obtained from `final_formulas`. Bind them together into a single data frame `summary_table`. Summarize your main findings.


```{R}
summary_table <- map(
  final_formulas, 
  \(x) glance(lm(x, data = df))
) %>% bind_rows()

summary_table %>% knitr::kable()
```






:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>

---


# Appendix


#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x` and outputs a `formula` object with `quality` as the response variable and the columns of `x` as the covariates. 

```{R}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and outputs a **rescaled** model matrix `X` in a format amenable for `glmnet()`

```{R}
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```




::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::
